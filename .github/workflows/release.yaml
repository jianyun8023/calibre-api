#
# This is free software, lisence use MIT.
#
# Copyright (C) 2019 jianyun8023 <https://zhaojianyun.com>
#

name: Build and Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'
  release:
    types: [published]

env:
  IMAGE_NAME: calibre-api

jobs:
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      # - name: Run tests
      #   run: go test -v ./...

      - name: Set up GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean --snapshot
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build standalone MCP server
        run: |
          mkdir -p dist
          # Build for multiple platforms
          GOOS=linux GOARCH=amd64 go build -o dist/calibre-mcp-server-linux-amd64 ./cmd/mcp-server
          GOOS=linux GOARCH=arm64 go build -o dist/calibre-mcp-server-linux-arm64 ./cmd/mcp-server
          GOOS=darwin GOARCH=amd64 go build -o dist/calibre-mcp-server-darwin-amd64 ./cmd/mcp-server
          GOOS=darwin GOARCH=arm64 go build -o dist/calibre-mcp-server-darwin-arm64 ./cmd/mcp-server
          GOOS=windows GOARCH=amd64 go build -o dist/calibre-mcp-server-windows-amd64.exe ./cmd/mcp-server

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: dist/

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build standalone MCP binaries
        run: |
          mkdir -p mcp-dist
          # Build for multiple platforms
          GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o mcp-dist/calibre-mcp-server-linux-amd64 ./cmd/mcp-server
          GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o mcp-dist/calibre-mcp-server-linux-arm64 ./cmd/mcp-server
          GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o mcp-dist/calibre-mcp-server-darwin-amd64 ./cmd/mcp-server
          GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o mcp-dist/calibre-mcp-server-darwin-arm64 ./cmd/mcp-server
          GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o mcp-dist/calibre-mcp-server-windows-amd64.exe ./cmd/mcp-server

      - name: Package MCP binaries
        run: |
          cd mcp-dist
          for file in calibre-mcp-server-*; do
            if [[ "$file" == *.exe ]]; then
              zip "${file%.exe}.zip" "$file"
            else
              tar -czf "${file}.tar.gz" "$file"
            fi
          done

      - name: Upload MCP binaries to release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            mcp-dist/*.tar.gz
            mcp-dist/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Set VERSION for release
        if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v')
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Set VERSION for dev
        if: github.event_name != 'release' && !startsWith(github.ref, 'refs/tags/v')
        run: echo "VERSION=dev" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ env.VERSION }}
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest